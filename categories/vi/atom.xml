<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vi | blog.hoatle.info]]></title>
  <link href="http://blog.hoatle.info/categories/vi/atom.xml" rel="self"/>
  <link href="http://blog.hoatle.info/"/>
  <updated>2013-12-02T18:46:26+00:00</updated>
  <id>http://blog.hoatle.info/</id>
  <author>
    <name><![CDATA[hoatle]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gán nhiều hàm xử lý sự kiện vào một phần tử trong JavaScript]]></title>
    <link href="http://blog.hoatle.info/2010/01/09/gan-nhieu-ham-xu-ly-su-kien-vao-mot-phan-tu-trong-javascript/"/>
    <updated>2010-01-09T02:06:00+00:00</updated>
    <id>http://blog.hoatle.info/2010/01/09/gan-nhieu-ham-xu-ly-su-kien-vao-mot-phan-tu-trong-javascript</id>
    <content type="html"><![CDATA[<p>Chiều nay đang lơ tơ mơ vì vừa ngủ trưa xong (bình thường không ngủ trưa thì thôi chứ cứ ngủ trưa
xong là lơ tơ mơ, chỉ muốn ngủ hết chiều cho sướng :d) thì có bạn hỏi trên group phpvietnam như
thế này:</p>

<p><strong>&ldquo;Em có một input có thuộc tính onclick="doSomeFunction();&rdquo; bây giờ muốn thêm
một hàm nữa ví dụ như onclick=&ldquo;doSomeFunction(); doSomeFunction2();&rdquo;. Công
việc này có làm bằng Javascript được không ah? Em cám ơn mọi người.&ldquo;</strong></p>

<p><em>Nguồn</em>: <a href="http://groups.google.com/group/phpvietnam/browse_thread/thread/c7a8688875a320c3">http://groups.google.com/group/phpvietnam/browse_thread/thread/c7a8688875a320c3</a></p>

<!-- more -->


<p>Trả lời bạn ý xong là hết cả buồn ngủ :P, tiện thể tối về viết lại kinh nghiệm cho cái blog đỡ
tủi thân :P. Khi xử lý sự kiện trong JavaScript có 4 mô hình đăng kí sự kiện được phát triển qua
thời gian. Tớ cũng nói thêm về cách sử dụng và xử lý ngữ cảnh (context) với từ khóa <code>this</code> trong các
hàm xử lý. Trong hàm xử lý phải làm sao đạt được 2 mục đích: truyền tham số vào hàm xử lý phải là
<code>event object</code> và từ khóa <code>this</code> trong hàm xử lý sự kiện đó phải là phần tử đã được đăng kí sự kiện.</p>

<p><strong>1. Inline Event Registration Model (Mô hình cổ xưa và quen thuộc nhất)</strong></p>

<p>Từ những ngày đầu khi có JavaScript và xử lý sự kiện thì chỉ có 1 cách duy nhất để gán hàm xử lý sự
kiện cho một phần tử và hiện nay nhiều người vẫn làm theo cách này. Đây là cách cổ xưa và nguyên
thủy nhất:</p>

<p><code>html
&lt;a href="#" onclick="doSomething();"&gt;link&lt;/a&gt;
</code></p>

<p>Mọi người đã quá quen với cách làm như trên, đặc biệt là từ khi viết những dòng code JavaScript đầu
tiên. Viết như vậy không có gì sai cả mà nó còn tiện, nhanh, dễ hiểu và ngày xưa đến nay người ta
vẫn làm thế đấy thôi :P. Tuy nhiên, khi JavaScript phát triển hơn thì cách tiếp cận khác đi chút vì
có nhiều vấn đề nảy sinh như: làm như trên không tách biệt cấu trúc (structure &ndash; html) và hành vi
(behavior &ndash; JavaScript), làm cho code rối tinh rối mù lên, nhất là khi bạn phải lấy dữ liệu AJAX về
rồi apply template vào thì rất mệt.</p>

<p>Ta có hàm xử lý sự kiện <code>doSomething</code> như sau:</p>

<p><code>javascript
function doSomething(evt) {
  alert(arguments[0]); // arguments[0] the same as evt
  alert(this);
}
</code></p>

<p>Với trường hợp này thì <code>evt</code> là <code>undefined</code> và <code>this</code> chính là <code>window object</code>. Giờ làm thế nào để
<code>evt</code> là <code>event object</code> và <code>this</code> là element thì làm theo cách sau:</p>

<p><code>html
&lt;a href="#" onclick="doSomething(event);"&gt;link&lt;/a&gt;
</code></p>

<p>Như này là đã truyền được <code>event</code> vào event handler rồi nhé. Theo tớ suy luận và thấy thì khi
element được <code>click</code> thì nó sẽ sinh ra sự kiện <code>onclick</code> như sau:</p>

<p><code>javascript
//[Native Code]
onclick(event) {
  //event handler được gọi theo cách này
  doSomething(event);
}
</code></p>

<p>Nhớ là phải để <code>event</code> là tham số của <code>doSomething(event)</code> chứ ko được dùng tên nào khác. Nếu dùng
tên <code>evt</code> chẳng hạn thì sẽ xảy ra <code>exeption</code> do:</p>

<p><code>javascript
[Native Code]
onclick(event) {
  //Gọi event handler mà có đối số là evt
  doSomething(evt); //Xảy ra exception ở đây vì evt là undefined.
}
</code></p>

<p>Đây là native code nên nó không cho <code>evt</code> là <code>undefined (null)</code> chứ trong các hàm bình thường thì
truyền tham số là <code>undefined (null)</code> thì không vấn đề gì, ko có exception gì hết :D.</p>

<p>Chú ý: đoạn code trên được test với chrome thì ko thấy lỗi mà vẫn chạy ầm ầm chứ IE, Firefox, Opera
đều xảy ra lỗi hết. Không biết nên chê hay khen bạn chrome đây :d.</p>

<p>Vậy là đến đây lấy được <code>event object</code> rồi, từ <code>event object</code> này lấy được rất nhiều thông tin khác
nhau như tên sự kiện, vị trí con trỏ chuột.v.v&hellip; (<code>evt.type</code>; <code>evt.charCode</code>&hellip;)</p>

<p>Giờ đến việc xử lý từ khóa <code>this</code> phải là element chứ không phải là <code>window object</code> làm như sau:</p>

<p><code>html
&lt;a href="#" onclick="doSomething.call(this, event)"&gt;link&lt;/a&gt;
</code></p>

<p>Khi đó trong Native Code sẽ là:</p>

<p><code>javascript
onclick(event) {
  //this ở đây là element
  doSomething.call(this, event);
}
</code></p>

<p>Trên chính là đoạn code hoàn chỉnh khi muốn lấy <code>this</code> và <code>event object</code>. Tớ nói kỹ ở đây thôi,
mấy đoạn sau sẽ không nói lại mấy cái này nữa.</p>

<p><strong>2. Traditional Event Registration Model</strong></p>

<p>Đây cũng là cách khá nhiều người làm khi bắt đầu muốn tách biệt giữa cấu trúc và hành vi trên trang
web. Trong code JavaScript sẽ đăng kí hàm xử lý sự kiện còn html thì chỉ là html mà thôi.</p>

<p><code>html
&lt;a href="#" id="mylink"&gt;link&lt;/a&gt;
</code></p>

<p>Sau đó trong JavaScript đợi dom load hết thì cho đoạn code sau được thực thi:</p>

<p><code>javascript
var linkEl = document.getElementById('myLink');
linkEl.onclick = function() {
  doSomething();
}
</code></p>

<p>Đây là cách truyền thống được dùng cũng không phải là ít và hiện nay nó tương thích trên tất cả các
trình duyệt lớn nên ko có gì đáng ngại cả :). Trong mô hình này thì <code>event object</code> sẽ được truyền
luôn vào hàm xử lý sự kiện, còn <code>this</code> trong hàm xử lý sự kiện cũng là element luôn :D.</p>

<p>Có thể làm thế này khi trong hàm <code>doSomething</code> muốn có <code>event object</code> và <code>this</code> là phần tử sinh ra
sự kiện.</p>

<p><code>javascript
linkEl.onclick = function(evt) {
  doSomething.call(this,evt);
}
</code></p>

<p>Trong trường hợp <code>doSomething</code> nhận thêm vài tham số thì nên viết như này:</p>

<p>```javascript
function doSomething(evt, param1, param2) {
//code implementation
}</p>

<p>linkEl.onclick = function(evt) {
  var param1, param2;
  doSomething.call(this, evt, param1, param2);
  // Giống với: doSomething.apply(this, [evt, param1, param2]);
}
```</p>

<p>Tiếp đến là mô hình thứ 3 và 4 trong xử lý sự kiện. W3C model và Microsoft (IE) model. Sau đó kết
hợp hai mô hình 3 và 4 này được giải pháp khá hoàn chỉnh và có thể sử dụng ngon lành đối với mọi
trình duyệt lớn :).</p>

<p><strong>3. W3C Event Registration Model</strong></p>

<p>Theo mô hình chuẩn của bạn W3C thì đây là cách đăng kí sự kiện cho một element, có thể đăng kí
cùng lúc nhiều hàm xử lý cho 1 element:</p>

<p><code>javascript
element.addEventListener(eventType, listener, useCapture);
</code></p>

<p><code>eventType</code> ở đây có thể là: click, mouseover, mouseout.v.v&hellip;</p>

<p><code>listener</code> chính là hàm xử lý sự kiện được thực thi khi có sự kiện <code>eventType</code> xảy ra.</p>

<p><code>useCapture</code> bạn nên để là <code>false</code> để thống nhất với trình duyệt IE, cái này liên quan tới event
phase mà tớ sẽ nói sau vào một bài viết khác.</p>

<p>Giờ có thể sử dụng như sau:</p>

<p><code>html
&lt;a href="#" id="mylink"&gt;link&lt;/a&gt;
</code></p>

<p>```javascript
//javascript, chỉ chạy trên các trình duyệt Firefox, Opera, Chrome
// ko chạy được trên IE
var linkEl = document.getElementById(&lsquo;myLink&rsquo;);
linkEl.addEventListener(&lsquo;click&rsquo;, function() {</p>

<pre><code>alert(arguments[0]); //event object
alert(this); //linkEl
</code></pre>

<p>}, false);
```</p>

<p>Rất may là <code>event object</code> lại được truyền và <code>this</code> trỏ luôn đến element nên có thể gọi
<code>doSomething</code> luôn:</p>

<p>```javascript
linkEl.addEventListener(&lsquo;click&rsquo;, function(evt) {</p>

<pre><code>doSomething.call(this, evt);
</code></pre>

<p>}, false);
```</p>

<p>Với cách này bạn có thể add bao nhiêu hàm xử lý sự kiện tùy ý, khi có 1 sự kiện xảy ra thì các hàm
xử lý sự kiện đã đăng kí sẽ được thực thi và theo W3C đưa ra thì các hàm này thực thi có thể không
theo thứ tự đăng kí và hiện tại bạn không thể gọi phương thức nào của element để kiểm tra xem sự
kiện nào đó có bao nhiêu hàm xử lý sự kiện đã được đăng kí.</p>

<p>Nhưng muốn bỏ một hàm xử lý đăng kí sự kiện thì làm thế nào? Có luôn:</p>

<p>```javascript</p>

<pre><code>element.removeEventListener(eventType, listener, useCapture);
</code></pre>

<p>```</p>

<p>Cái này rất hiếm khi dùng. Khi muốn <code>remove</code> được một <code>listener</code> nào thì <code>listener</code> đó phải có tên.
Cách <code>add</code> của tớ ở trên kia dùng <code>anonymouse function</code> thì không thể <code>remove</code> được. Muốn <code>remove</code>
được thì phải làm theo cách này:</p>

<p><code>javascript
var myListener = function() {
  alert(arguments[0]);
  alert(this);
 //cho chạy một lần đầu rồi remove listener đi luôn
  this.removeEventListener('click', myListener, false);
}
linkEl.addEventListener('click', myListener, false);
</code></p>

<p>Đấy là theo W3C, còn Microsoft lại làm theo cách khác.</p>

<p><strong>4. Microsoft Event Registration Model</strong></p>

<p>Bạn IE thì lại chơi kiểu khác, bạn ý không dùng <code>addEventListener</code> mà lại dùng:</p>

<p>```javascript</p>

<pre><code>element.attachEvent(onEventType, handler);
</code></pre>

<p>```</p>

<p>Ví dụ:</p>

<p><code>javascript
var linkEl = document.getElementById('myLink');
//Chỉ chạy trên IE
linkEl.attachEvent('onclick', function() {
  alert(arguments[0]); //event object
  alert(this); //linkEl
})
</code></p>

<p>Muốn remove một handler (listener) thì dùng <code>detachEvent</code> cũng làm tương tự giống mô hình W3C ở trên:</p>

<p><code>javascript
var myListener = function(evt) {
  alert(evt);
  alert(this);
  this.detachEvent('onclick', myListener);
}
</code></p>

<p>Chú ý vì IE không có 2 event phase là <code>capture</code> và <code>bubble</code> mà chỉ có <code>bubble</code> phase nên khi sử dụng
với mô hình của W3C thì luôn dùng <code>false</code> với <code>useCapture</code> cho an toàn, nếu hiểu kỹ sự khác biệt của
2 phase này và có mục đích thì mới nên dùng <code>true</code>.</p>

<p><strong>5. Cuối cùng là cách kết hợp mô hình W3C với M$ (IE) thì ta có thể thiết kế và sử api đơn giản như sau:</strong></p>

<p><code>javascript
addEventListener(element, eventType, listener, useCapture);
removeEventListener(element, eventType, listener, useCapture);
</code></p>

<p>Phải luôn giữ <code>event object</code> được truyền vào tham số của listener và từ khóa this trong listener
phải trỏ đến element. Code như sau:</p>

<p>```javascript
/<em>*
 * Cross browser add event listener method. For &lsquo;evt&rsquo; pass a string value with the leading &ldquo;on&rdquo; omitted
 * e.g. addEventListener(window,&lsquo;load&rsquo;,myFunctionNameWithoutParenthesis,false);
 * @param    obj object to attach event
 * @param    evt event name: click, mouseover, focus, blur&hellip;
 * @param    func    function name
 * @param    useCapture    true or false; if false => use bubbling
 * @static
 * @see        <a href="http://phrogz.net/JS/AttachEvent_js.txt">http://phrogz.net/JS/AttachEvent_js.txt</a>
 </em>/
 function addEventListener(obj, evt, fnc, useCapture) {</p>

<pre><code>if (obj === null || evt === null || fnc ===  null || useCapture === null) {
   alert('all params are required for addEventListener');
    return;
}
if (!useCapture) useCapture = false;
if (obj.addEventListener){
    obj.addEventListener(evt, fnc, useCapture);
} else if (obj.attachEvent) {
    obj.attachEvent('on'+evt, function(evt) {
        fnc.call(obj, evt);
    });
} else{
    myAttachEvent(obj, evt, fnc);
    obj['on'+evt] = function() { myFireEvent(obj,evt) };
}
//The following are for browsers like NS4 or IE5Mac which don't support either
//attachEvent or addEventListener
var myAttachEvent = function(obj, evt, fnc) {
    if (!obj.myEvents) obj.myEvents={};
    if (!obj.myEvents[evt]) obj.myEvents[evt]=[];
    var evts = obj.myEvents[evt];
    evts[evts.length] = fnc;
}
var myFireEvent = function(obj, evt) {
    if (!obj || !obj.myEvents || !obj.myEvents[evt]) return;
    var evts = obj.myEvents[evt];
    for (var i=0,len=evts.length;i&lt;len;i++) evts[i]();
}
</code></pre>

<p>}
/<em>*
 * removes event listener.
 * @param    obj element
 * @param    evt event name, &lsquo;click&rsquo;, &lsquo;blur&rsquo;. &lsquo;focus&rsquo;&hellip;
 * @func    function name to be removed if found
 * @useCapture true or false; false &ndash;> bubbling event phase
 * @static
 * //TODO make sure method cross-browsered
 </em>/
 function removeEventListener(obj, evt, func, useCapture) {</p>

<pre><code>if (obj.removeEventListener) {
    obj.removeEventListener(evt, func, useCapture);
} else if (obj.detachEvent) {//IE
    obj.detachEvent('on'+evt, func);
}
</code></pre>

<p>}
```</p>

<p>Khi đó cách sử dụng đơn giản như sau:</p>

<p>```javascript
  var linkEl = document.getElementById(&lsquo;myLink&rsquo;);
  addEventListener(&lsquo;click&rsquo;, function(evt) {</p>

<pre><code>doSomething.call(this, evt);
</code></pre>

<p>  }, false);
```</p>

<p>Hy vọng tớ sẽ sớm viết thêm về event phase sau, chúc bạn code vui :D.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tổng kết năm 2009 và những dự định cho năm 2010]]></title>
    <link href="http://blog.hoatle.info/2009/12/31/tong-ket-nam-2009-va-nhung-du-dinh-cho-nam-2010/"/>
    <updated>2009-12-31T00:41:00+00:00</updated>
    <id>http://blog.hoatle.info/2009/12/31/tong-ket-nam-2009-va-nhung-du-dinh-cho-nam-2010</id>
    <content type="html"><![CDATA[<p>Hic, lâu lắm rồi ko viết blog, cũng vì lười, cũng vì bận nữa. Nhưng bắt đầu từ bây giờ, lại khoái
viết lại rồi, có nhiều thứ chia sẻ hơn, dù bận gì thì bận cũng sẽ phải cố viết đều đặn hơn. 8 tháng
không động đến blog, giờ ngồi mãi mới nặn ra được vài chữ. Mà tiếng Anh thì kém hẳn, bí từ kinh
khủng mà đấy là còn chưa thi xong tốt nghiệp :SS. Trong bài viết này sẽ điểm lại một số điểm nổi
bật của năm qua mà đáng lẽ những điểm này sẽ là một bài blog cơ :(.</p>

<!-- more -->


<ul>
<li><p>Tháng 2: Giữa tháng 2 bắt đầu vào làm part-time ở eXo Platform. Đầu tiên là Document Writer, sau
đó thì tham gia eXo Social team, vào làm lơ tơ mơ, nhưng giờ cũng đỡ hơn rồi :d.</p></li>
<li><p>Tháng 4: Cùng tổ chức Barcamp Hanoi 2009 với @xoai, @forty4vn, @dac2205 và bạn của @xoai bên RMIT.
Đây là lần đầu tiên tớ tham gia tổ chức một sự kiện như thế, được gặp gỡ, giao lưu với những người
có kinh nghiệm thật là thích :d. Ở Barcamp Hanoi, tớ nói về &ldquo;OpenSocial&rdquo;. OpenSocial được sử dụng ở
hầu hết các mạng xã hội lớn (trừ facebook ko theo chuẩn này), hiện nay như tớ được biết thì ở Việt
Nam có tamtay.vn và me.zing.vn đang phát triển theo chuẩn này. Còn bên eXo Social cũng đang phát
triển sản phẩm theo chuẩn này.</p></li>
<li><p>Tháng 11: Cùng anh @tuanchip (eXo CS team leader), anh Nam (CS team), chị Thủy (phòng marketing và
truyền thông), anh Việt (trưởng phòng nhân sự) giới thiệu OpenSocial và eXo Platform ở 3 trung tâm
lập trình FPT-Aptech, mục đích là giới thiệu công nghệ, tìm kiếm nhân sự, giới thiệu công ty để
các bạn định hướng về công nghệ để sau này nếu muốn làm việc ở eXo thì nên biết và tìm hiểu những
gì là cần thiết.</p></li>
<li><p>Tháng 12:</p>

<ul>
<li><p>Lần đầu tiên vào Xì-Gòn tham dự Barcamp Saigon. Vui phết, tớ vào đấy 3 ngày, thanks anh
@jishanvn đã cho ở nhờ 3 ngày :D. Ở đấy tớ nói về &ldquo;Advanced JavaScript Techniques&rdquo;.</p></li>
<li><p>Lần thứ 2 tham gia Hanoi PHP Day, lần trước thì đến nghe thôi chứ ko nói, lần này thì nói về
&ldquo;Advanced JavaScript Techniques&rdquo;, tớ chuẩn bị chủ đề này cho cả Barcamp Saigon và Hanoi PHP Day
mà :d, tuy nhiên 2 bài nói thì không giống nhau hoàn toàn đâu ;).</p></li>
</ul>
</li>
</ul>


<p>Đấy là một số điểm nổi bật của năm 2009, sang năm mới 2010 hy vọng sẽ tham gia được nhiều sự kiện
thú vị nữa, được giao lưu anh em nhiều hơn. Sang tháng 1 hy vọng thi tốt nghiệp suôn sẻ để được tự
do bay nhảy :d.</p>

<ul>
<li><p>Đầu năm hy vọng có 1 buổi offline một số anh em IT để nhậu + chém gió (Hanoi Hacker Happy Hour).</p></li>
<li><p>Hy vọng lại có Barcamp Hanoi tiếp, eXo sẽ tài trợ tiếp luôn :d.</p></li>
<li><p>Sau khi tốt nghiệp sẽ âm thầm phát triển 1 cái gì đó :D.</p></li>
<li><p>&hellip;</p></li>
</ul>


<p>Đầu tư khá nhiều sức vào project để bảo vệ ở Hanoi Aptech (cùng @huydung) nhưng cuối cùng đuối :((,
sau đấy chưa lấy lại được tinh thần để làm tiếp :|.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Làm việc cho eXo Platform hay Google đây?]]></title>
    <link href="http://blog.hoatle.info/2009/04/01/lam-viec-cho-exo-platform-hay-google-day/"/>
    <updated>2009-04-01T22:35:00+00:00</updated>
    <id>http://blog.hoatle.info/2009/04/01/lam-viec-cho-exo-platform-hay-google-day</id>
    <content type="html"><![CDATA[<p><strong>Chú ý: Đây là bài viết trêu đùa ngày Cá Tháng Tư</strong></p>

<p>Tớ đã suy nghĩ rất nhiều. Chả là bên phía Google có đề nghị tớ qua làm việc (full-time) ở Singapore
trong vòng 2 năm sau vụ ứng dụng OpenSocial của tớ (Music-Engine) đạt giải nhì trong cuộc thi viết
ứng dụng OpenSocial khu vực Đông Nam Á do Google tổ chức. Tuy nhiên, không hiểu lý do phức tạp gì
về vụ hải quan mà tớ không thể nhận được Ipod Touch như trong phần thưởng đã ghi, thay vào đó sẽ
nhận được tiền mặt :(. Shannon Madison (là người chịu trách nhiệm chính của cuộc thi) và tớ gần đây
đã bàn luận nhiều về cơ hội việc làm này. Chị ý bảo rằng một số nhân viên của Google sẽ tham gia
BarCamp Hanoi 2009 này và sẽ hé lộ cho chúng ta biết về chiến lược của Google ở Đông Nam Á nói chung
và Việt Nam nói riêng. Giờ thì tớ phải chọn: làm việc bán thời gian ở eXo Platform hay làm việc toàn
thời gian cho Google ở Singapore trong vòng 2 năm.</p>

<!-- more -->


<p>Làm việc cho Google là một cơ hội tốt và hiếm có cho tương lai của tớ. Shannon cũng có nói về kế
hoạch văn phòng đại diện của Google ở Việt Nam, so vậy nếu tớ làm việc cho Google ở Singapore xong
2 năm thì có thể trở lại Việt Nam để làm ở văn phòng đại diện của Google ở Việt Nam. Tớ biết, đây
là cơ hội rất tốt và hiếm hoi đê tớ có thể thử sức mình khi làm việc ở nước ngoài và lại là làm việc
cho Google nữa chứ, sẽ tuyệt vời lắm chứ! Tuy nhiên, nếu tớ đồng ý làm việc ở Sing, điều đó có nghĩa
là tớ phải ngừng việc học của mình ở HUT, nghĩa là tớ phải rờ xa gia đình, bạn bè và những kỷ niệm
đẹp để đến đó làm việc. Thực sự tớ chưa bao giờ ra nước ngoài cả, nếu được vậy thì còn gì bằng.</p>

<p>Tuy nhiên cũng không phải là không có khúc mắc. Tớ vừa mới làm việc ở eXo Platform được có 1 tháng
rưỡi. Mọi thứ mới chỉ là bắt đầu và thực sự thì tớ chưa đạt được điều gì ở eXo Platform cả. Tớ đã
cố gắng nhiều để được làm việc nơi đây. Chỉ sau một thời gian ngắn ngủi như vậy thôi thì tớ biết eXo
Platform chính là môi trường tốt nhất ở Hà Nội này để cho tớ học tập, làm việc và có những người bạn
tốt. Mọi người ở đây thật tốt, dường như tớ đã quen hết với mọi người rồi. Mọi người đã chia sẻ với
nhau rất nhiều, nhất là trong các vụ: tiệc tùng đám cưới, chia tay (Jeremi), karaoke. Ngoài ra thì
tớ cũng muốn tìm hiểu về eXo Platform sau đó áp dụng vào project cuối cùng ở Hanoi Aptech sau đó là
tốt nghiệp.</p>

<p>Giờ nếu tớ đồng ý sang Sing làm việc cho Google thì tớ phải từ bỏ nhiều thứ ở nơi đây. Nếu không thì
tớ vẫn làm việc ở eXo Platform bình thường. Trời ơi!!! Làm thế nào bây giờ? Giá mà làm việc ở eXo
Platform được 1 thời gian sau đó rồi mới nhận được lời đề nghị của Google có phải tốt hơn không. Tớ
phải làm sao giờ, ai có thể cho tớ lời khuyên đúng đắn không :(?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lùi hạn tham dự Cuộc thi Thiết kế Logo Barcamp Hà Nội 2009]]></title>
    <link href="http://blog.hoatle.info/2009/02/26/lui-han-tham-du-cuoc-thi-thiet-ke-logo-barcamp-ha-noi-2009/"/>
    <updated>2009-02-26T23:17:00+00:00</updated>
    <id>http://blog.hoatle.info/2009/02/26/lui-han-tham-du-cuoc-thi-thiet-ke-logo-barcamp-ha-noi-2009</id>
    <content type="html"><![CDATA[<p>Logo đầu tiên gửi đến cuộc thi:</p>

<p><img class="center <a" src="href="http://farm4.static.flickr.com/3541/3307608039_9a27531d47.jpg?v=0">http://farm4.static.flickr.com/3541/3307608039_9a27531d47.jpg?v=0</a>" title="Logo đầu tiên gửi đến cuộc thi" ></p>

<p>Hiện tại chúng tôi đã nhận được những logo đầu tiên gửi đến để tham dự cuộc thi và chúng tôi cũng
biết là thời gian hơi gấp rút để bạn có thể hoàn thành tác phẩm của mình đúng thời hạn.</p>

<p>Sau cuộc họp lần 2 của ban tổ chức vừa rồi, hạn nộp logo dự thi sẽ được lùi lại đến:</p>

<p><code>Thứ bảy ngày 21 tháng 3 năm 2009 , 11:59 PM (Giờ GMT+7)</code></p>

<p>Vì vậy các bạn có hơn 3 tuần kể từ bây giờ để chuẩn bị. Nhưng đừng lãng phí thời gian, hãy bắt đầu
công việc ngay từ bây giờ!</p>

<p>Chúng tôi rất cám ơn bạn đã tham gia và đang chờ đợi những Logo ưng ý nhất của bạn dành cho
BarCamp Hanoi 2009.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSDE - môi trường tuyệt vời cho các nhà phát triển ứng dụng OpenSocial]]></title>
    <link href="http://blog.hoatle.info/2009/02/22/osde-moi-truong-tuyet-voi-cho-cac-nha-phat-trien-ung-dung-opensocial/"/>
    <updated>2009-02-22T23:06:00+00:00</updated>
    <id>http://blog.hoatle.info/2009/02/22/osde-moi-truong-tuyet-voi-cho-cac-nha-phat-trien-ung-dung-opensocial</id>
    <content type="html"><![CDATA[<p>Vừa chiều nay xong vào twitter search về opensocial, thấy mọi người đang rất quan tâm đến OpenSocia
weekendapps. Tự dưng thấy có cái link đến project này: OSDE &ndash; OpenSocial Development Environment và
yêu ngay tắp lự. Dự án là một module cho Eclipse để phát triển các ứng dụng OpenSocial trên môi
trường phát triển của các nhà phát triển.</p>

<p>Tớ vẫn còn nhớ cách đây hơn tháng vẫn code ứng dụng rồi test luôn trên các container thật như orkut,
hi5, myspace, friendster&hellip; nhưng rồi chẳng hiểu sao chỉ test được mỗi trên orkut :|. Khi đăng kí
trên các mạng này, để test ứng dụng của mình, bạn phải đăng kí, kết bạn [để test:)] và sau đó tiến
hành test và nhờ các friend-tester của mình test cho nhau :)).</p>

<p>Theo tớ đây là những bước nhàm chán và thực sự không phải cách pro trong phát triển ứng dụng. Bạn sẽ
test ứng dụng của mình như thế nào khi không có kết nối internet? OSDE chính là giải pháp hoàn hảo
và thực sự là module tuyệt vời cho Eclipse để phát triển các ứng dụng OpenSocial.</p>

<p>Bạn còn chờ gì nữa, project đó đây và hãy phát triển những ứng dụng OpenSocial tuyệt vời cho cộng
đồng nhé: <a href="http://www.eisbahn.jp/trac/osde/">http://www.eisbahn.jp/trac/osde/</a></p>

<p>Tuyệt vời, không thể nói gì hơn :). Thực sự có module này mình hào hứng hơn để phát triển các ứng
dụng OpenSocial. Code cho vui ý mà, hè hè ;)</p>
]]></content>
  </entry>
  
</feed>
