<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vi | blog.hoatle.info]]></title>
  <link href="http://blog.hoatle.info/categories/vi/atom.xml" rel="self"/>
  <link href="http://blog.hoatle.info/"/>
  <updated>2013-12-09T01:18:36+00:00</updated>
  <id>http://blog.hoatle.info/</id>
  <author>
    <name><![CDATA[hoatle]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Điều gì làm nên hệ thống IT tốt?]]></title>
    <link href="http://blog.hoatle.info/2013/12/08/dieu-gi-lam-nen-he-thong-it-tot/"/>
    <updated>2013-12-08T23:32:00+00:00</updated>
    <id>http://blog.hoatle.info/2013/12/08/dieu-gi-lam-nen-he-thong-it-tot</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/2013/12/data-protection.jpg" title="Dữ liệu và bảo vệ dữ liệu" ></p>

<p>Hệ thống IT (Information Technology) là gì? Hệ thống IT tốt cần đảm bảo điều gì?</p>

<!-- more -->


<h2>Hệ Thống IT Là Gì?</h2>

<p>Nói ngắn gọn, hệ thống IT là hệ thống lưu trữ và xử lý dữ liệu.</p>

<h2>Dữ Liệu (Data)</h2>

<p>Chính vì vậy, dữ liệu là quan trọng nhất. Hệ thống IT tốt cần phải bảo vệ dữ liệu đó.</p>

<h2>Bảo Vệ Dữ Liệu (Data Protection)</h2>

<p>Cần:</p>

<ul>
<li><p>an toàn thông tin (security)</p></li>
<li><p>sao chép dự phòng (backup) và phục hồi (recovery)</p></li>
</ul>


<h2>Tóm Lại</h2>

<p>Một hệ thống IT tốt cần lưu trữ, xử lý dữ liệu và phải đảm bảo an toàn cho dữ liệu đó.</p>

<p>Hệ thống IT tốt = dữ liệu + an toàn thông tin + sao chép dự phòng + phục hồi</p>

<p>(A robust IT system = data + security + backup + recovery)</p>

<h2>Áp Dụng Cho Teracy</h2>

<p>Ngay từ những ngày đầu triển khai hệ thống IT, Teracy lấy mục tiêu phát triển hệ thống IT tốt làm
một trong những tôn chỉ quan trọng sống còn cho các dịch vụ của mình.</p>

<p>Chi tiết: <a href="http://dev.teracy.org/docs/intro.html#about-teracy">http://dev.teracy.org/docs/intro.html#about-teracy</a></p>

<p>Tuy nhiên để triển khai hệ thống IT tốt không dễ và một ngày hai ngày là xong. Tuy đã có sự chuẩn bị
ngay từ ban đầu nhưng một sự cố đáng tiếc đã xảy ra quá sớm khiến toàn bộ dữ liệu trên một VPS của
Teracy đã biến mất hoàn toàn chỉ sau vài giờ (do sự bất cẩn khi chọn nhà cung cấp VPS không tốt và
DEVOPS không kịp trở tay sau khi có thông báo dừng dịch vụ đột ngột của nhà cung cấp). Rất may là dữ
liệu không có nhiều và đã có backup một phần nên sau 2 ngày toàn bộ dữ liệu đã được phục hồi. Những
bài học đắt giá như vậy cần phải có để Teracy biết tầm quan trọng của dữ liệu và bảo vệ dữ liệu.</p>

<h2>Nên Xem Thêm</h2>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Backup">http://en.wikipedia.org/wiki/Backup</a></li>
<li><a href="http://www.dpbestflow.org/links/39">http://www.dpbestflow.org/links/39</a></li>
<li><a href="http://www.quora.com/What-tape-technology-does-Google-use-for-backups">http://www.quora.com/What-tape-technology-does-Google-use-for-backups</a></li>
<li><a href="http://www.quora.com/Data/How-do-top-companies-like-Google-Microsoft-Facebook-backup-their-data-How-many-layers-of-backups-do-they-have">http://www.quora.com/Data/How-do-top-companies-like-Google-Microsoft-Facebook-backup-their-data-How-many-layers-of-backups-do-they-have</a></li>
<li><a href="http://www.quora.com/Facebook-1/Does-Facebook-keep-a-redundant-copy-of-their-users-data-on-backup-tapes">http://www.quora.com/Facebook-1/Does-Facebook-keep-a-redundant-copy-of-their-users-data-on-backup-tapes</a></li>
<li><a href="http://www.quora.com/Mark-Zuckerberg-1/Does-Mark-Zuckerberg-or-Facebook-employees-have-a-skeleton-key-granting-him-access-to-every-members-Facebook-profile-page-and-information">http://www.quora.com/Mark-Zuckerberg-1/Does-Mark-Zuckerberg-or-Facebook-employees-have-a-skeleton-key-granting-him-access-to-every-members-Facebook-profile-page-and-information</a></li>
</ul>


<h2>Ảnh Minh Hoạ</h2>

<ul>
<li><a href="http://signalhilldigital.com/wp-content/uploads/2012/11/privacy-e1354237310123.jpg">http://signalhilldigital.com/wp-content/uploads/2012/11/privacy-e1354237310123.jpg</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[22 quy tắc từ Pixar để tạo ra những câu chuyện phi thường]]></title>
    <link href="http://blog.hoatle.info/2013/12/05/22-quy-tac-tu-pixar-de-tao-ra-nhung-cau-chuyen-phi-thuong/"/>
    <updated>2013-12-05T20:43:00+00:00</updated>
    <id>http://blog.hoatle.info/2013/12/05/22-quy-tac-tu-pixar-de-tao-ra-nhung-cau-chuyen-phi-thuong</id>
    <content type="html"><![CDATA[<p><img class="center <a" src="href="http://i.imgur.com/0R62pAxh.jpg">http://i.imgur.com/0R62pAxh.jpg</a>" title="&ldquo;22 quy tắc kể chuyện từ Pixar&rdquo;" ></p>

<p>Làm thế nào để kể được những câu chuyện hấp dẫn, cuốn hút người đọc, người nghe? Kể chuyện là một
hình thức giao tiếp và kỹ năng giao tiếp có thể học được. Emma Coats<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> &ndash; nghệ sỹ kịch bản và là
cựu nhân viên của hãng phim Pixar đã đưa ra 22 quy tắc được áp dụng trong quá trình làm việc. Nắm
được các quy tắc này có thể giúp tạo ra những câu chuyện hay để áp dụng cho bài blog, buổi diễn
thuyết, hay một cuốn tiểu thuyết, v.v&hellip;</p>

<!-- more -->


<p><strong>Quy tắc 1</strong></p>

<p><img class="center <a" src="href="http://i.imgur.com/FH5iTTGh.jpg">http://i.imgur.com/FH5iTTGh.jpg</a>" title="You admire a character for trying more than for their successes." ></p>

<p><blockquote><p>Bạn ngưỡng mộ nhân vật vì sự cố gắng hơn là sự thành công.</p></blockquote></p>

<p><strong>Quy tắc 2</strong></p>

<p><img class="center <a" src="href="http://i.imgur.com/p3QY4RFh.jpg">http://i.imgur.com/p3QY4RFh.jpg</a>" title="You gotta keep in mind what’s interesting to you as an audience, not what’s fun to do as a writer. They can be very different." ></p>

<p><blockquote><p>Bạn phải luôn tâm niệm điều gì thu hút bạn khi là khán giả chứ không phải điều gì làm bạn vui khi là người viết truyện. Hai điều này có thể rất khác biệt.</p></blockquote></p>

<p><strong>Quy tắc 3</strong></p>

<p><img class="center <a" src="href="http://i.imgur.com/UvVbXGzh.jpg">http://i.imgur.com/UvVbXGzh.jpg</a>" title="Trying for theme is important, but you won’t see what the story is actually about til you’re at the end of it. Now rewrite." ></p>

<p><blockquote><p>Theo chủ đề rất quan trọng, nhưng bạn sẽ không thấy được thực sự câu chuyện về cái gì cho đến khi nó kết thúc. Giờ hãy viết lại.</p></blockquote></p>

<p><strong>Quy tắc 4</strong></p>

<p><img class="center <a href=http://i.imgur.com/X0ciEDHh.jpg>http://i.imgur.com/X0ciEDHh.jpg</a> Once upon a time there was <strong><em>. Every day, </em></strong>. One day <strong><em>. Because of that, </em></strong>. Because of that, <strong><em>. Until finally" src="</em></strong>."></p>

<p><blockquote><p>Ngày xửa ngày xưa có một <strong><em>. Ngày ngày, </em></strong>. Một hôm <strong><em>. Vì điều đó, </em></strong>. Vì điều đó, <strong><em>. Cuối cùng </em></strong>.</p></blockquote></p>

<p><strong>Quy tắc 5</strong></p>

<p><img class="center <a" src="href="http://i.imgur.com/3DaFKkrh.jpg">http://i.imgur.com/3DaFKkrh.jpg</a>" title="Simplify. Focus. Combine characters. Hop over detours. You’ll feel like you’re losing valuable stuff but it sets you free." ></p>

<p><blockquote><p>Đơn giản hoá. Tập trung. Kết hợp các nhân vật. Không đi lòng vòng. Bạn sẽ cảm thấy như mình đang đánh mất thứ có giá trị nhưng điều đó lại khiến bạn được tự do.</p></blockquote></p>

<p><strong>Quy tắc 6</strong></p>

<p><img class="center <a" src="href="http://i.imgur.com/vWfQRLqh.jpg">http://i.imgur.com/vWfQRLqh.jpg</a>" title="What is your character good at, comfortable with? Throw the polar opposite at them. Challenge them. How do they deal?" ></p>

<p><blockquote><p>Nhân vật của bạn giỏi, thoải mái với điều gì? Hãy ném điều hoàn toàn ngược lại vào nhân vật. Thử thách nhân vật. Nhân vật sẽ xử lý thế nào?</p></blockquote></p>

<p><strong>Quy tắc 7</strong></p>

<p><img class="center <a" src="href="http://i.imgur.com/cFUIo38h.jpg">http://i.imgur.com/cFUIo38h.jpg</a>" title="Come up with your ending before you figure out your middle. Seriously. Endings are hard, get yours working up front." ></p>

<p><blockquote><p>Đưa ra kết thúc trước khi bạn xử lý được phần giữa. Thực sự phần kết rất khó vì vậy hãy giải quyết nó trước.</p></blockquote></p>

<p><strong>Quy tắc 8</strong></p>

<p><img class="center <a" src="href="http://i.imgur.com/Wz37wm9h.jpg">http://i.imgur.com/Wz37wm9h.jpg</a>" title="Finish your story, let go even if it’s not perfect. In an ideal world you have both, but move on. Do better next time." ></p>

<p><blockquote><p>Hãy hoàn thành câu chuyện của bạn, tạm hài lòng dù nó chưa hoàn hảo. Bạn có cả hai trong điều kiện lý tưởng, nhưng bạn không thể chờ đợi mãi. Lần tới hãy làm tốt hơn.</p></blockquote></p>

<p><strong>Quy tắc 9</strong></p>

<p><img class="center <a" src="href="http://i.imgur.com/8uDAIrqh.jpg">http://i.imgur.com/8uDAIrqh.jpg</a>" title="When you’re stuck, make a list of what WOULDN’T happen next. Lots of times the material to get you unstuck will show up." ></p>

<p><blockquote><p>Khi bạn bí, hãy tạo danh sách những gì SẼ KHÔNG xảy ra tiếp theo. Nguyên liệu giúp bạn hết bí sẽ xuất hiện.</p></blockquote></p>

<p><strong>Quy tắc 10</strong></p>

<p><img class="center <a" src="href="http://i.imgur.com/p819bg0h.jpg">http://i.imgur.com/p819bg0h.jpg</a>" title="Pull apart the stories you like. What you like in them is a part of you; you’ve got to recognize it before you can use it." ></p>

<p><blockquote><p>Mổ xẻ những câu chuyện bạn thích. Điều làm bạn thích từ các câu chuyện đó là một phần trong con người bạn; bạn sẽ phải nhận ra nó trước khi bạn có thể sử dụng nó.</p></blockquote></p>

<p><strong>Quy tắc 11</strong></p>

<p><img class="center <a" src="href="http://i.imgur.com/M6Io26ah.jpg">http://i.imgur.com/M6Io26ah.jpg</a>" title="Putting it on paper lets you start fixing it. If it stays in your head, a perfect idea, you’ll never share it with anyone." ></p>

<p><blockquote><p>Đặt ý tưởng lên giấy để bạn bắt đầu sửa nó. Nếu nó cứ mãi ở trong đầu bạn, dù là ý tưởng hoàn hảo thì bạn sẽ không bao giờ chia sẻ được nó với ai.</p></blockquote></p>

<p><strong>Quy tắc 12</strong></p>

<p><img class="center <a" src="href="http://i.imgur.com/UqK06Egh.jpg">http://i.imgur.com/UqK06Egh.jpg</a>" title="Discount the 1st thing that comes to mind. And the 2nd, 3rd, 4th, 5th – get the obvious out of the way. Surprise yourself." ></p>

<p><blockquote><p>Loại bỏ điều đầu tiên xuất hiện trong đầu. Và điều thứ 2, thứ 3, thứ 4, thứ 5 &ndash; hãy loại bỏ những điều hiển nhiên ra khỏi đầu bạn. Hãy làm bạn ngạc nhiên.</p></blockquote></p>

<p><strong>Quy tắc 13</strong></p>

<p><img class="center <a" src="href="http://i.imgur.com/FomAmzyh.jpg">http://i.imgur.com/FomAmzyh.jpg</a>" title="Give your characters opinions. Passive or malleable might seem likable to you as you write, but it’s poison to the audience." ></p>

<p><blockquote><p>Để nhân vật của bạn nói lên tiếng nói của mình. Có thể bạn thích tính thụ động/ sự mài dũa khi viết, nhưng đó lại là thuốc độc với khán giả.</p></blockquote></p>

<p><strong>Quy tắc 14</strong></p>

<p><img class="center <a" src="href="http://i.imgur.com/iDIBEE5h.jpg">http://i.imgur.com/iDIBEE5h.jpg</a>" title="Why must you tell THIS story? What’s the belief burning within you that your story feeds off of? That’s the heart of it." ></p>

<p><blockquote><p>Tại sao bạn phải kể CHÍNH câu chuyện này? Niềm tin nào đang cháy trong bạn để nuôi dưỡng câu chuyện đó? Đây chính là trái tim của câu chuyện.</p></blockquote></p>

<p><strong>Quy tắc 15</strong></p>

<p><img class="center <a" src="href="http://i.imgur.com/2YCppV1h.jpg">http://i.imgur.com/2YCppV1h.jpg</a>" title="If you were your character, in this situation, how would you feel? Honesty lends credibility to unbelievable situations." ></p>

<p><blockquote><p>Nếu bạn rơi vào hoàn cảnh của nhân vật, bạn sẽ cảm thấy thế nào? Sự thành thật tạo sự tin cậy cho các tình huống khó tin.</p></blockquote></p>

<p><strong>Quy tắc 16</strong></p>

<p><img class="center <a" src="href="http://i.imgur.com/BR08aPmh.jpg">http://i.imgur.com/BR08aPmh.jpg</a>" title="What are the stakes? Give us reason to root for the character. What happens if they don’t succeed? Stack the odds against." ></p>

<p><blockquote><p>Những trở ngại là gì? Cho chúng tôi lý do để khuyến khích, cổ vũ nhân vật. Điều gì xảy ra nếu nhân vật không thành công? Hãy tạo các lớp trở ngại cho nhân vật.</p></blockquote></p>

<p><strong>Quy tắc 17</strong></p>

<p><img class="center <a" src="href="http://i.imgur.com/w6RMHXAh.jpg">http://i.imgur.com/w6RMHXAh.jpg</a>" title="No work is ever wasted. If it’s not working, let go and move on &ndash; it’ll come back around to be useful later." ></p>

<p><blockquote><p>Không có việc nào là lãng phí cả. Nếu giờ nó không giải quyết điều gì, bỏ lại và hãy tiếp tục công việc &ndash; sẽ có lúc nó có ích.</p></blockquote></p>

<p><strong>Quy tắc 18</strong></p>

<p><img class="center <a" src="href="http://i.imgur.com/P0CyOcgh.jpg">http://i.imgur.com/P0CyOcgh.jpg</a>" title="You have to know yourself: the difference between doing your best &amp; fussing. Story is testing, not refining." ></p>

<p><blockquote><p>Bạn phải hiểu rõ bản thân: sự khác biệt giữa làm tốt nhất và sự cầu toàn. Câu chuyện là phép thử, không phải tinh chỉnh.</p></blockquote></p>

<p><strong>Quy tắc 19</strong></p>

<p><img class="center <a" src="href="http://i.imgur.com/85cXV7Eh.jpg">http://i.imgur.com/85cXV7Eh.jpg</a>" title="Coincidences to get characters into trouble are great; coincidences to get them out of it are cheating." ></p>

<p><blockquote><p>Những ngẫu nhiên khiến nhân vật gặp rắc rối thì tuyệt; nhưng những ngẫu nhiên để đưa nhân vật ra khỏi rắc rối là lừa dối.</p></blockquote></p>

<p><strong>Quy tắc 20</strong></p>

<p><img class="center <a" src="href="http://i.imgur.com/Kk0Hnvoh.jpg">http://i.imgur.com/Kk0Hnvoh.jpg</a>" title="Exercise: take the building blocks of a movie you dislike. How d’you rearrange them into what you DO like?" ></p>

<p><blockquote><p>Luyện tập: lấy những khối xây dựng của một phim bạn không thích. Làm thế nào để sắp xếp lại các khối đó để bạn THÍCH nó?</p></blockquote></p>

<p><strong>Quy tắc 21</strong></p>

<p><img class="center <a" src="href="http://i.imgur.com/6ruM3G1h.jpg">http://i.imgur.com/6ruM3G1h.jpg</a>" title="You gotta identify with your situation or characters, can’t just write ‘cool’. What would make YOU act that way?" ></p>

<p><blockquote><p>Bạn phải đồng nhất với tình huống/ nhân vật của bạn, không thể chỉ cần viết cho nó &lsquo;ngầu&rsquo;. Điều gì khiến BẠN hành động theo cách đó?</p></blockquote></p>

<p><strong>Quy tắc 22</strong></p>

<p><img class="center <a" src="href="http://i.imgur.com/Yl2uz21h.jpg">http://i.imgur.com/Yl2uz21h.jpg</a>" title="What’s the essence of your story? Most economical telling of it? If you know that, you can build out from there." ></p>

<p><blockquote><p>Điều cốt lõi ở câu chuyện của bạn là gì? Cách kể chuyện hiệu quả nhất cho nó? Nếu bạn làm rõ được điều này, bạn có thể xây dựng câu chuyện từ đó.</p></blockquote></p>

<p>Ảnh minh hoạ:</p>

<ul>
<li><a href="http://imgur.com/a/fPLnM">http://imgur.com/a/fPLnM</a></li>
</ul>


<p>Tham khảo:</p>

<ul>
<li><a href="http://storyshots.tumblr.com/post/25032057278/22-storybasics-ive-picked-up-in-my-time-at-pixar">http://storyshots.tumblr.com/post/25032057278/22-storybasics-ive-picked-up-in-my-time-at-pixar</a></li>
<li><a href="http://www.slideshare.net/powerfulpoint/pixar-22rulestophenomenalstorytellingpowerfulpointslideshare?sf19996470=1">http://www.slideshare.net/powerfulpoint/pixar-22rulestophenomenalstorytellingpowerfulpointslideshare?sf19996470=1</a></li>
<li><a href="http://en.wikipedia.org/wiki/Pixar">http://en.wikipedia.org/wiki/Pixar</a></li>
<li><a href="http://imgur.com/a/fPLnM">http://imgur.com/a/fPLnM</a></li>
<li><a href="http://communicateskills.com/2012/10/11/22-rules-to-phenomenal-storytelling/">http://communicateskills.com/2012/10/11/22-rules-to-phenomenal-storytelling/</a></li>
<li><a href="http://katebrauning.com/2013/05/15/pixar-rule-18-no-writerly-fussing-allowed/">http://katebrauning.com/2013/05/15/pixar-rule-18-no-writerly-fussing-allowed/</a></li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>https://twitter.com/lawnrocket<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thêm đối số vào message bundle trong OpenSocial]]></title>
    <link href="http://blog.hoatle.info/2010/01/16/them-doi-so-vao-message-bundle-trong-opensocial/"/>
    <updated>2010-01-16T21:18:00+00:00</updated>
    <id>http://blog.hoatle.info/2010/01/16/them-doi-so-vao-message-bundle-trong-opensocial</id>
    <content type="html"><![CDATA[<h2>Bài toán</h2>

<ul>
<li>Khi làm việc với message bundle trong OpenSocial để dùng nhiều ngôn ngữ trong ứng dụng tùy thuộc
vào ngôn ngữ người dùng
(<a href="http://wiki.opensocial.org/index.php?title=Localizing_OpenSocial_applications">localization</a>) đôi
khi bạn cần phải thêm đối số động vào chuỗi hiển thị.</li>
</ul>


<p>Ví dụ có chuỗi chào như này: Hello {user} trong đó user sẽ được thay bằng username tương ứng của
người dùng. Nhưng với OpenSocial api hiện tại thì không làm thế nào để thêm đối số vào được mà chỉ
có thể lấy được message tương ứng theo key cung cấp.</p>

<ul>
<li>Do vậy đây là cách làm của tớ: viết một thêm 1 class <code>eXo.social.Locale.getMsg(key)</code> và class này
cung cấp api cũng tương tự như với class <code>Prefs</code> để lấy <code>lang</code>, <code>country</code>, <code>msg</code> (class <code>Prefs</code> còn
cung cấp nhiều api khác nữa): prefs.getMsg(key). Class <code>eXo.social.Locale</code> cung cấp thêm phương thức
<code>eXo.social.Locale.getMsg(key, [val1, val2,...]);</code> để thêm đối số vào &ldquo;message bundle&rdquo;.</li>
</ul>


<!-- more -->


<h2>Giải pháp</h2>

<ul>
<li>Viết class <code>eXo.social.Locale</code>:</li>
</ul>


<p>```javascript
/<em>*
 * Locale.js
 * Utility for Locale, dynamic binding message bundle with arguments
 * Usage:
 * eXo.social.Locale.getLang(); the same as prefs.getLang();
 * eXo.social.Locale.getCountry(); the same as prefs.getCountry();
 * eXo.social.Locale.getMsg(key); the same as prefs.getMsg(key);
 * eXo.social.Locale.getMsg(key, args); dynamic binding argument to message bundle
 * @author  hoatle
 * @since   October 27, 2009
 * @copyright   eXo Platform
 </em>/</p>

<p>(function() {</p>

<pre><code>//prefs object to get lang, country, message bundle
var prefs;

/**
 * private function to lazily initialize prefs object
 */
function getPrefs() {
    if (!prefs) {
        prefs = new gadgets.Prefs();
    }
    return prefs;
}
/**
 * Class definition
 */
var Locale = function() {

}
/**
 * gets current lang
 * @static
 */
Locale.getLang = function() {
    prefs = getPrefs();
    return prefs.getLang();
}
/**
 * gets current country
 * @static
 */
Locale.getCountry = function() {
    prefs = getPrefs();
    return prefs.getCountry();
}
/**
 * alternative for prefs.getMsg(key)
 * uses to getMsg with provided key and substitute args
 *
 * eg: Test for {0}, {1}
 * If args does not match num of {\d}, warning and try to replace by corresponding index.
 * {0} should be replaced by args[0], etc.,
 * If args not provided, functions as prefs.getMsg(key)
 * @param   key String
 * @param   opt_args Array
 * @static
 */
Locale.getMsg = function(key, opt_args) {
    prefs = getPrefs();
    if (!key) {
        debug.warn('key is null!');
        return '';
    }
    var msg = prefs.getMsg(key);
    if (msg === '') {
        debug.warn('Can not find resource bundle with key = ' + key);
        return msg;
    }
    if (!opt_args) return msg;

    //checks if number of {\d} in msg matches opt_args.length
    var regex = /{\d+}/g;
    var matches = msg.match(regex);
    if (matches.length !== opt_args.length) {
        debug.warn("required " + matches.length + " args, provided: " + opt_args.length);
    }
    //substitutes by index: {0} in msg should be replaced by opt_args[0] and so on
    for (var i = 0, l = matches.length; i &lt; l; i++) {
        var index = matches[i].match(/\d+/g)[0];
        //TODO should improve performance
        var strToReplace = opt_args[index];
        if (!strToReplace) {
            debug.warn('matches[' + i + ']: ' + matches[i] + ' but no opt_args[' + index + ']');
        } else {
            msg = msg.replace(matches[i], opt_args[index]);
        }
    }
    return msg;
}
//Expose
window.eXo = window.eXo || {};
window.eXo.social = window.eXo.social || {};
window.eXo.social.Locale = Locale;
</code></pre>

<p>})();
```</p>

<p>Trong class trên không có gì đáng nói ngoài cách dùng regular expression để thay thế chuỗi với
pattern là <code>{0}, {1}, {2}</code> và lấy các index trong <code>{}</code> để thay bằng <code>opt_args[index]</code> tương ứng.
Bạn có thể xem thêm vài viết của <a href="http://twitter.com/sanglt">@sanglt</a>:
<a href="http://www.sanglt.com/content/su-dung-regular-expression-trong-javascript">Sử dụng regular expression trong JavaScript</a>.</p>

<ul>
<li>Chú ý: Class <code>eXo.social.Locale</code> dùng debug được @cowboy viết, đây là cách debug/log tuyệt vời và
tớ rất thích. Giờ trong tất cả các dự án hay ứng dụng nào tớ cũng dùng, sau này nhìn vào console là
biết lỗi gì ở đâu ngay, chứ dùng alert thì đúng là cực hình. Các bạn cũng nên sử dụng cách debug/log
này :).</li>
</ul>


<p>Download ứng dụng ví dụ đơn giản với cách thêm đối số vào &ldquo;message bundle&rdquo; tại
<a href="http://github.com/hoatle/opensocial/downloads">http://github.com/hoatle/opensocial/downloads</a></p>

<p>Mã nguồn tớ để ở đây: <a href="http://github.com/hoatle/opensocial/tree/master/message-bundle">http://github.com/hoatle/opensocial/tree/master/message-bundle</a></p>

<p>Đây là file ứng dụng xml:</p>

<p>```xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
<Module></p>

<pre><code>&lt;ModulePrefs title="Arguments Binding Message Bundle"
             description="Simple-App for arguments binding with message bundle"
             author_email="hoatlevan@gmail.com"
             author_affiliation="eXo Platform"&gt;
    &lt;Locale messages="locale/ALL_ALL.xml" /&gt;
    &lt;Locale lang="en" messages="locale/en_ALL.xml" /&gt;
    &lt;Locale lang="vi" messages="locale/vi_ALL.xml" /&gt;
    &lt;Require feature="opensocial-0.8" /&gt;
&lt;/ModulePrefs&gt;
&lt;Content type="html"&gt;
&lt;![CDATA[
    &lt;link rel="stylesheet" type="text/css" href="style/style.css" /&gt;
    &lt;script type="text/javascript" src="script/debug.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="script/eXo/social/Locale.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="script/app.js"&gt;&lt;/script&gt;
    &lt;p&gt;Resource bundle rendered by server: &lt;strong&gt;__MSG_hello_world__&lt;/strong&gt;&lt;/p&gt;
    &lt;p&gt;Resource bundle rendered by JavaScript:&lt;/p&gt;
    &lt;div id="helloMsg"&gt;&lt;/div&gt;
    &lt;div id="helloMsgArgs"&gt;&lt;/div&gt;
]]&gt;
&lt;/Content&gt;
</code></pre>

<p></Module>
```</p>

<p>Có thể thấy ở trên <code>__MSG_hello_world__</code> sẽ được thay thế bằng message bundle tương ứng với key là
&ldquo;hello_world&rdquo; (tớ để tất cả các file message bundle trong thư mục <code>locale</code>).</p>

<p>Để sử dụng class <code>eXo.social.Locale</code>, chúng ta có file app.js:</p>

<p>```javascript
function run() {</p>

<pre><code>var prefs = new gadgets.Prefs(),
    helloWorld = prefs.getMsg('hello_world');
alert(helloWorld); //"Hello world!" if current language is English
                   //"Chào thế giới!" if current language is Vietnamese

//eXo.social.Locale usage
var Locale = eXo.social.Locale;
var helloMsgEl = document.getElementById('helloMsg'),
    helloMsgArgsEl = document.getElementById('helloMsgArgs');

helloMsgEl.innerHTML = Locale.getMsg('hello_world');
helloMsgArgsEl.innerHTML = Locale.getMsg('hello_user_to_place', ['hoatle', 'Vietnam']);
</code></pre>

<p>}</p>

<p>gadgets.util.registerOnLoadHandler(run);
```</p>

<p>Bạn có thể chạy ứng dụng này ở bất kì OpenSocial container nào. Chúc bạn code vui :D.</p>

<p>Lưu ý: Có thể sử dụng OpenSocial templates để thêm đối số vào message bundle nhưng hiện nay hầu hết
các container chưa hỗ trợ hết.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gán nhiều hàm xử lý sự kiện vào một phần tử trong JavaScript]]></title>
    <link href="http://blog.hoatle.info/2010/01/09/gan-nhieu-ham-xu-ly-su-kien-vao-mot-phan-tu-trong-javascript/"/>
    <updated>2010-01-09T02:06:00+00:00</updated>
    <id>http://blog.hoatle.info/2010/01/09/gan-nhieu-ham-xu-ly-su-kien-vao-mot-phan-tu-trong-javascript</id>
    <content type="html"><![CDATA[<p>Chiều nay đang lơ tơ mơ vì vừa ngủ trưa xong (bình thường không ngủ trưa thì thôi chứ cứ ngủ trưa
xong là lơ tơ mơ, chỉ muốn ngủ hết chiều cho sướng :d) thì có bạn hỏi trên group phpvietnam như
thế này:</p>

<p><strong>&ldquo;Em có một input có thuộc tính onclick="doSomeFunction();&rdquo; bây giờ muốn thêm
một hàm nữa ví dụ như onclick=&ldquo;doSomeFunction(); doSomeFunction2();&rdquo;. Công
việc này có làm bằng Javascript được không ah? Em cám ơn mọi người.&ldquo;</strong></p>

<p><em>Nguồn</em>: <a href="http://groups.google.com/group/phpvietnam/browse_thread/thread/c7a8688875a320c3">http://groups.google.com/group/phpvietnam/browse_thread/thread/c7a8688875a320c3</a></p>

<!-- more -->


<p>Trả lời bạn ý xong là hết cả buồn ngủ :P, tiện thể tối về viết lại kinh nghiệm cho cái blog đỡ
tủi thân :P. Khi xử lý sự kiện trong JavaScript có 4 mô hình đăng kí sự kiện được phát triển qua
thời gian. Tớ cũng nói thêm về cách sử dụng và xử lý ngữ cảnh (context) với từ khóa <code>this</code> trong các
hàm xử lý. Trong hàm xử lý phải làm sao đạt được 2 mục đích: truyền tham số vào hàm xử lý phải là
<code>event object</code> và từ khóa <code>this</code> trong hàm xử lý sự kiện đó phải là phần tử đã được đăng kí sự kiện.</p>

<p><strong>1. Inline Event Registration Model (Mô hình cổ xưa và quen thuộc nhất)</strong></p>

<p>Từ những ngày đầu khi có JavaScript và xử lý sự kiện thì chỉ có 1 cách duy nhất để gán hàm xử lý sự
kiện cho một phần tử và hiện nay nhiều người vẫn làm theo cách này. Đây là cách cổ xưa và nguyên
thủy nhất:</p>

<p><code>html
&lt;a href="#" onclick="doSomething();"&gt;link&lt;/a&gt;
</code></p>

<p>Mọi người đã quá quen với cách làm như trên, đặc biệt là từ khi viết những dòng code JavaScript đầu
tiên. Viết như vậy không có gì sai cả mà nó còn tiện, nhanh, dễ hiểu và ngày xưa đến nay người ta
vẫn làm thế đấy thôi :P. Tuy nhiên, khi JavaScript phát triển hơn thì cách tiếp cận khác đi chút vì
có nhiều vấn đề nảy sinh như: làm như trên không tách biệt cấu trúc (structure &ndash; html) và hành vi
(behavior &ndash; JavaScript), làm cho code rối tinh rối mù lên, nhất là khi bạn phải lấy dữ liệu AJAX về
rồi apply template vào thì rất mệt.</p>

<p>Ta có hàm xử lý sự kiện <code>doSomething</code> như sau:</p>

<p><code>javascript
function doSomething(evt) {
  alert(arguments[0]); // arguments[0] the same as evt
  alert(this);
}
</code></p>

<p>Với trường hợp này thì <code>evt</code> là <code>undefined</code> và <code>this</code> chính là <code>window object</code>. Giờ làm thế nào để
<code>evt</code> là <code>event object</code> và <code>this</code> là element thì làm theo cách sau:</p>

<p><code>html
&lt;a href="#" onclick="doSomething(event);"&gt;link&lt;/a&gt;
</code></p>

<p>Như này là đã truyền được <code>event</code> vào event handler rồi nhé. Theo tớ suy luận và thấy thì khi
element được <code>click</code> thì nó sẽ sinh ra sự kiện <code>onclick</code> như sau:</p>

<p><code>javascript
//[Native Code]
onclick(event) {
  //event handler được gọi theo cách này
  doSomething(event);
}
</code></p>

<p>Nhớ là phải để <code>event</code> là tham số của <code>doSomething(event)</code> chứ ko được dùng tên nào khác. Nếu dùng
tên <code>evt</code> chẳng hạn thì sẽ xảy ra <code>exeption</code> do:</p>

<p><code>javascript
[Native Code]
onclick(event) {
  //Gọi event handler mà có đối số là evt
  doSomething(evt); //Xảy ra exception ở đây vì evt là undefined.
}
</code></p>

<p>Đây là native code nên nó không cho <code>evt</code> là <code>undefined (null)</code> chứ trong các hàm bình thường thì
truyền tham số là <code>undefined (null)</code> thì không vấn đề gì, ko có exception gì hết :D.</p>

<p>Chú ý: đoạn code trên được test với chrome thì ko thấy lỗi mà vẫn chạy ầm ầm chứ IE, Firefox, Opera
đều xảy ra lỗi hết. Không biết nên chê hay khen bạn chrome đây :d.</p>

<p>Vậy là đến đây lấy được <code>event object</code> rồi, từ <code>event object</code> này lấy được rất nhiều thông tin khác
nhau như tên sự kiện, vị trí con trỏ chuột.v.v&hellip; (<code>evt.type</code>; <code>evt.charCode</code>&hellip;)</p>

<p>Giờ đến việc xử lý từ khóa <code>this</code> phải là element chứ không phải là <code>window object</code> làm như sau:</p>

<p><code>html
&lt;a href="#" onclick="doSomething.call(this, event)"&gt;link&lt;/a&gt;
</code></p>

<p>Khi đó trong Native Code sẽ là:</p>

<p><code>javascript
onclick(event) {
  //this ở đây là element
  doSomething.call(this, event);
}
</code></p>

<p>Trên chính là đoạn code hoàn chỉnh khi muốn lấy <code>this</code> và <code>event object</code>. Tớ nói kỹ ở đây thôi,
mấy đoạn sau sẽ không nói lại mấy cái này nữa.</p>

<p><strong>2. Traditional Event Registration Model</strong></p>

<p>Đây cũng là cách khá nhiều người làm khi bắt đầu muốn tách biệt giữa cấu trúc và hành vi trên trang
web. Trong code JavaScript sẽ đăng kí hàm xử lý sự kiện còn html thì chỉ là html mà thôi.</p>

<p><code>html
&lt;a href="#" id="mylink"&gt;link&lt;/a&gt;
</code></p>

<p>Sau đó trong JavaScript đợi dom load hết thì cho đoạn code sau được thực thi:</p>

<p><code>javascript
var linkEl = document.getElementById('myLink');
linkEl.onclick = function() {
  doSomething();
}
</code></p>

<p>Đây là cách truyền thống được dùng cũng không phải là ít và hiện nay nó tương thích trên tất cả các
trình duyệt lớn nên ko có gì đáng ngại cả :). Trong mô hình này thì <code>event object</code> sẽ được truyền
luôn vào hàm xử lý sự kiện, còn <code>this</code> trong hàm xử lý sự kiện cũng là element luôn :D.</p>

<p>Có thể làm thế này khi trong hàm <code>doSomething</code> muốn có <code>event object</code> và <code>this</code> là phần tử sinh ra
sự kiện.</p>

<p><code>javascript
linkEl.onclick = function(evt) {
  doSomething.call(this,evt);
}
</code></p>

<p>Trong trường hợp <code>doSomething</code> nhận thêm vài tham số thì nên viết như này:</p>

<p>```javascript
function doSomething(evt, param1, param2) {
//code implementation
}</p>

<p>linkEl.onclick = function(evt) {
  var param1, param2;
  doSomething.call(this, evt, param1, param2);
  // Giống với: doSomething.apply(this, [evt, param1, param2]);
}
```</p>

<p>Tiếp đến là mô hình thứ 3 và 4 trong xử lý sự kiện. W3C model và Microsoft (IE) model. Sau đó kết
hợp hai mô hình 3 và 4 này được giải pháp khá hoàn chỉnh và có thể sử dụng ngon lành đối với mọi
trình duyệt lớn :).</p>

<p><strong>3. W3C Event Registration Model</strong></p>

<p>Theo mô hình chuẩn của bạn W3C thì đây là cách đăng kí sự kiện cho một element, có thể đăng kí
cùng lúc nhiều hàm xử lý cho 1 element:</p>

<p><code>javascript
element.addEventListener(eventType, listener, useCapture);
</code></p>

<p><code>eventType</code> ở đây có thể là: click, mouseover, mouseout.v.v&hellip;</p>

<p><code>listener</code> chính là hàm xử lý sự kiện được thực thi khi có sự kiện <code>eventType</code> xảy ra.</p>

<p><code>useCapture</code> bạn nên để là <code>false</code> để thống nhất với trình duyệt IE, cái này liên quan tới event
phase mà tớ sẽ nói sau vào một bài viết khác.</p>

<p>Giờ có thể sử dụng như sau:</p>

<p><code>html
&lt;a href="#" id="mylink"&gt;link&lt;/a&gt;
</code></p>

<p>```javascript
//javascript, chỉ chạy trên các trình duyệt Firefox, Opera, Chrome
// ko chạy được trên IE
var linkEl = document.getElementById(&lsquo;myLink&rsquo;);
linkEl.addEventListener(&lsquo;click&rsquo;, function() {</p>

<pre><code>alert(arguments[0]); //event object
alert(this); //linkEl
</code></pre>

<p>}, false);
```</p>

<p>Rất may là <code>event object</code> lại được truyền và <code>this</code> trỏ luôn đến element nên có thể gọi
<code>doSomething</code> luôn:</p>

<p>```javascript
linkEl.addEventListener(&lsquo;click&rsquo;, function(evt) {</p>

<pre><code>doSomething.call(this, evt);
</code></pre>

<p>}, false);
```</p>

<p>Với cách này bạn có thể add bao nhiêu hàm xử lý sự kiện tùy ý, khi có 1 sự kiện xảy ra thì các hàm
xử lý sự kiện đã đăng kí sẽ được thực thi và theo W3C đưa ra thì các hàm này thực thi có thể không
theo thứ tự đăng kí và hiện tại bạn không thể gọi phương thức nào của element để kiểm tra xem sự
kiện nào đó có bao nhiêu hàm xử lý sự kiện đã được đăng kí.</p>

<p>Nhưng muốn bỏ một hàm xử lý đăng kí sự kiện thì làm thế nào? Có luôn:</p>

<p>```javascript</p>

<pre><code>element.removeEventListener(eventType, listener, useCapture);
</code></pre>

<p>```</p>

<p>Cái này rất hiếm khi dùng. Khi muốn <code>remove</code> được một <code>listener</code> nào thì <code>listener</code> đó phải có tên.
Cách <code>add</code> của tớ ở trên kia dùng <code>anonymouse function</code> thì không thể <code>remove</code> được. Muốn <code>remove</code>
được thì phải làm theo cách này:</p>

<p><code>javascript
var myListener = function() {
  alert(arguments[0]);
  alert(this);
 //cho chạy một lần đầu rồi remove listener đi luôn
  this.removeEventListener('click', myListener, false);
}
linkEl.addEventListener('click', myListener, false);
</code></p>

<p>Đấy là theo W3C, còn Microsoft lại làm theo cách khác.</p>

<p><strong>4. Microsoft Event Registration Model</strong></p>

<p>Bạn IE thì lại chơi kiểu khác, bạn ý không dùng <code>addEventListener</code> mà lại dùng:</p>

<p>```javascript</p>

<pre><code>element.attachEvent(onEventType, handler);
</code></pre>

<p>```</p>

<p>Ví dụ:</p>

<p><code>javascript
var linkEl = document.getElementById('myLink');
//Chỉ chạy trên IE
linkEl.attachEvent('onclick', function() {
  alert(arguments[0]); //event object
  alert(this); //linkEl
})
</code></p>

<p>Muốn remove một handler (listener) thì dùng <code>detachEvent</code> cũng làm tương tự giống mô hình W3C ở trên:</p>

<p><code>javascript
var myListener = function(evt) {
  alert(evt);
  alert(this);
  this.detachEvent('onclick', myListener);
}
</code></p>

<p>Chú ý vì IE không có 2 event phase là <code>capture</code> và <code>bubble</code> mà chỉ có <code>bubble</code> phase nên khi sử dụng
với mô hình của W3C thì luôn dùng <code>false</code> với <code>useCapture</code> cho an toàn, nếu hiểu kỹ sự khác biệt của
2 phase này và có mục đích thì mới nên dùng <code>true</code>.</p>

<p><strong>5. Cuối cùng là cách kết hợp mô hình W3C với M$ (IE) thì ta có thể thiết kế và sử api đơn giản như sau:</strong></p>

<p><code>javascript
addEventListener(element, eventType, listener, useCapture);
removeEventListener(element, eventType, listener, useCapture);
</code></p>

<p>Phải luôn giữ <code>event object</code> được truyền vào tham số của listener và từ khóa this trong listener
phải trỏ đến element. Code như sau:</p>

<p>```javascript
/<em>*
 * Cross browser add event listener method. For &lsquo;evt&rsquo; pass a string value with the leading &ldquo;on&rdquo; omitted
 * e.g. addEventListener(window,&lsquo;load&rsquo;,myFunctionNameWithoutParenthesis,false);
 * @param    obj object to attach event
 * @param    evt event name: click, mouseover, focus, blur&hellip;
 * @param    func    function name
 * @param    useCapture    true or false; if false => use bubbling
 * @static
 * @see        <a href="http://phrogz.net/JS/AttachEvent_js.txt">http://phrogz.net/JS/AttachEvent_js.txt</a>
 </em>/
 function addEventListener(obj, evt, fnc, useCapture) {</p>

<pre><code>if (obj === null || evt === null || fnc ===  null || useCapture === null) {
   alert('all params are required for addEventListener');
    return;
}
if (!useCapture) useCapture = false;
if (obj.addEventListener){
    obj.addEventListener(evt, fnc, useCapture);
} else if (obj.attachEvent) {
    obj.attachEvent('on'+evt, function(evt) {
        fnc.call(obj, evt);
    });
} else{
    myAttachEvent(obj, evt, fnc);
    obj['on'+evt] = function() { myFireEvent(obj,evt) };
}
//The following are for browsers like NS4 or IE5Mac which don't support either
//attachEvent or addEventListener
var myAttachEvent = function(obj, evt, fnc) {
    if (!obj.myEvents) obj.myEvents={};
    if (!obj.myEvents[evt]) obj.myEvents[evt]=[];
    var evts = obj.myEvents[evt];
    evts[evts.length] = fnc;
}
var myFireEvent = function(obj, evt) {
    if (!obj || !obj.myEvents || !obj.myEvents[evt]) return;
    var evts = obj.myEvents[evt];
    for (var i=0,len=evts.length;i&lt;len;i++) evts[i]();
}
</code></pre>

<p>}
/<em>*
 * removes event listener.
 * @param    obj element
 * @param    evt event name, &lsquo;click&rsquo;, &lsquo;blur&rsquo;. &lsquo;focus&rsquo;&hellip;
 * @func    function name to be removed if found
 * @useCapture true or false; false &ndash;> bubbling event phase
 * @static
 * //TODO make sure method cross-browsered
 </em>/
 function removeEventListener(obj, evt, func, useCapture) {</p>

<pre><code>if (obj.removeEventListener) {
    obj.removeEventListener(evt, func, useCapture);
} else if (obj.detachEvent) {//IE
    obj.detachEvent('on'+evt, func);
}
</code></pre>

<p>}
```</p>

<p>Khi đó cách sử dụng đơn giản như sau:</p>

<p>```javascript
  var linkEl = document.getElementById(&lsquo;myLink&rsquo;);
  addEventListener(&lsquo;click&rsquo;, function(evt) {</p>

<pre><code>doSomething.call(this, evt);
</code></pre>

<p>  }, false);
```</p>

<p>Hy vọng tớ sẽ sớm viết thêm về event phase sau, chúc bạn code vui :D.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tổng kết năm 2009 và những dự định cho năm 2010]]></title>
    <link href="http://blog.hoatle.info/2009/12/31/tong-ket-nam-2009-va-nhung-du-dinh-cho-nam-2010/"/>
    <updated>2009-12-31T00:41:00+00:00</updated>
    <id>http://blog.hoatle.info/2009/12/31/tong-ket-nam-2009-va-nhung-du-dinh-cho-nam-2010</id>
    <content type="html"><![CDATA[<p>Hic, lâu lắm rồi ko viết blog, cũng vì lười, cũng vì bận nữa. Nhưng bắt đầu từ bây giờ, lại khoái
viết lại rồi, có nhiều thứ chia sẻ hơn, dù bận gì thì bận cũng sẽ phải cố viết đều đặn hơn. 8 tháng
không động đến blog, giờ ngồi mãi mới nặn ra được vài chữ. Mà tiếng Anh thì kém hẳn, bí từ kinh
khủng mà đấy là còn chưa thi xong tốt nghiệp :SS. Trong bài viết này sẽ điểm lại một số điểm nổi
bật của năm qua mà đáng lẽ những điểm này sẽ là một bài blog cơ :(.</p>

<!-- more -->


<ul>
<li><p>Tháng 2: Giữa tháng 2 bắt đầu vào làm part-time ở eXo Platform. Đầu tiên là Document Writer, sau
đó thì tham gia eXo Social team, vào làm lơ tơ mơ, nhưng giờ cũng đỡ hơn rồi :d.</p></li>
<li><p>Tháng 4: Cùng tổ chức Barcamp Hanoi 2009 với @xoai, @forty4vn, @dac2205 và bạn của @xoai bên RMIT.
Đây là lần đầu tiên tớ tham gia tổ chức một sự kiện như thế, được gặp gỡ, giao lưu với những người
có kinh nghiệm thật là thích :d. Ở Barcamp Hanoi, tớ nói về &ldquo;OpenSocial&rdquo;. OpenSocial được sử dụng ở
hầu hết các mạng xã hội lớn (trừ facebook ko theo chuẩn này), hiện nay như tớ được biết thì ở Việt
Nam có tamtay.vn và me.zing.vn đang phát triển theo chuẩn này. Còn bên eXo Social cũng đang phát
triển sản phẩm theo chuẩn này.</p></li>
<li><p>Tháng 11: Cùng anh @tuanchip (eXo CS team leader), anh Nam (CS team), chị Thủy (phòng marketing và
truyền thông), anh Việt (trưởng phòng nhân sự) giới thiệu OpenSocial và eXo Platform ở 3 trung tâm
lập trình FPT-Aptech, mục đích là giới thiệu công nghệ, tìm kiếm nhân sự, giới thiệu công ty để
các bạn định hướng về công nghệ để sau này nếu muốn làm việc ở eXo thì nên biết và tìm hiểu những
gì là cần thiết.</p></li>
<li><p>Tháng 12:</p>

<ul>
<li><p>Lần đầu tiên vào Xì-Gòn tham dự Barcamp Saigon. Vui phết, tớ vào đấy 3 ngày, thanks anh
@jishanvn đã cho ở nhờ 3 ngày :D. Ở đấy tớ nói về &ldquo;Advanced JavaScript Techniques&rdquo;.</p></li>
<li><p>Lần thứ 2 tham gia Hanoi PHP Day, lần trước thì đến nghe thôi chứ ko nói, lần này thì nói về
&ldquo;Advanced JavaScript Techniques&rdquo;, tớ chuẩn bị chủ đề này cho cả Barcamp Saigon và Hanoi PHP Day
mà :d, tuy nhiên 2 bài nói thì không giống nhau hoàn toàn đâu ;).</p></li>
</ul>
</li>
</ul>


<p>Đấy là một số điểm nổi bật của năm 2009, sang năm mới 2010 hy vọng sẽ tham gia được nhiều sự kiện
thú vị nữa, được giao lưu anh em nhiều hơn. Sang tháng 1 hy vọng thi tốt nghiệp suôn sẻ để được tự
do bay nhảy :d.</p>

<ul>
<li><p>Đầu năm hy vọng có 1 buổi offline một số anh em IT để nhậu + chém gió (Hanoi Hacker Happy Hour).</p></li>
<li><p>Hy vọng lại có Barcamp Hanoi tiếp, eXo sẽ tài trợ tiếp luôn :d.</p></li>
<li><p>Sau khi tốt nghiệp sẽ âm thầm phát triển 1 cái gì đó :D.</p></li>
<li><p>&hellip;</p></li>
</ul>


<p>Đầu tư khá nhiều sức vào project để bảo vệ ở Hanoi Aptech (cùng @huydung) nhưng cuối cùng đuối :((,
sau đấy chưa lấy lại được tinh thần để làm tiếp :|.</p>
]]></content>
  </entry>
  
</feed>
